{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Dari Osorio Junior\\\\Downloads\\\\webex react\\\\webex\\\\src\\\\components\\\\Table.js\";\nimport React from 'react';\nvar th = document.getElementsByTagName('th');\n\nfor (var c = 0; c < th.length; c++) {\n  th[c].addEventListener('click', item(c));\n}\n\nfunction sortTable() {\n  var table, rows, switching, i, x, y, shouldSwitch;\n  table = document.getElementById(\"tabela\");\n  switching = true;\n  /* Make a loop that will continue until\r\n  no switching has been done: */\n\n  while (switching) {\n    // Start by saying: no switching is done:\n    switching = false;\n    rows = table.rows;\n    /* Loop through all table rows (except the\r\n    first, which contains table headers): */\n\n    for (i = 1; i < rows.length - 1; i++) {\n      // Start by saying there should be no switching:\n      shouldSwitch = false;\n      /* Get the two elements you want to compare,\r\n      one from current row and one from the next: */\n\n      x = rows[i].getElementsByTagName(\"TD\")[0];\n      y = rows[i + 1].getElementsByTagName(\"TD\")[0]; // Check if the two rows should switch place:\n\n      if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\n        // If so, mark as a switch and break the loop:\n        shouldSwitch = true;\n        break;\n      }\n    }\n\n    if (shouldSwitch) {\n      /* If a switch has been marked, make the switch\r\n      and mark that a switch has been done: */\n      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\n      switching = true;\n    }\n  }\n}\n\nvar Table = function Table(_ref) {\n  var lista = _ref.lista;\n  return React.createElement(\"table\", {\n    id: \"tabela\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 45\n    },\n    __self: this\n  }, React.createElement(\"thead\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 46\n    },\n    __self: this\n  }, React.createElement(\"th\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 47\n    },\n    __self: this\n  }, \"Nome\"), React.createElement(\"th\", {\n    onClick: sortTable,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 48\n    },\n    __self: this\n  }, \"\\xDAltimo acesso\")), React.createElement(\"tbody\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50\n    },\n    __self: this\n  }, lista.map(function (row) {\n    return React.createElement(\"tr\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 52\n      },\n      __self: this\n    }, React.createElement(\"td\", {\n      value: row.data.getTime(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 53\n      },\n      __self: this\n    }, row.data.toLocaleString(\"pt-BR\")), React.createElement(\"td\", {\n      value: row.name,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 54\n      },\n      __self: this\n    }, row.name));\n  })));\n};\n\nexport default Table;","map":{"version":3,"sources":["C:\\Users\\Dari Osorio Junior\\Downloads\\webex react\\webex\\src\\components\\Table.js"],"names":["React","th","document","getElementsByTagName","c","length","addEventListener","item","sortTable","table","rows","switching","i","x","y","shouldSwitch","getElementById","innerHTML","toLowerCase","parentNode","insertBefore","Table","lista","map","row","data","getTime","toLocaleString","name"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,IAAIC,EAAE,GAAGC,QAAQ,CAACC,oBAAT,CAA8B,IAA9B,CAAT;;AAEA,KAAI,IAAIC,CAAC,GAAC,CAAV,EAAaA,CAAC,GAACH,EAAE,CAACI,MAAlB,EAA0BD,CAAC,EAA3B,EAA8B;AAC5BH,EAAAA,EAAE,CAACG,CAAD,CAAF,CAAME,gBAAN,CAAuB,OAAvB,EAAgCC,IAAI,CAACH,CAAD,CAApC;AACD;;AAED,SAASI,SAAT,GAAqB;AACnB,MAAIC,KAAJ,EAAWC,IAAX,EAAiBC,SAAjB,EAA4BC,CAA5B,EAA+BC,CAA/B,EAAkCC,CAAlC,EAAqCC,YAArC;AACAN,EAAAA,KAAK,GAAGP,QAAQ,CAACc,cAAT,CAAwB,QAAxB,CAAR;AACAL,EAAAA,SAAS,GAAG,IAAZ;AACA;;;AAEA,SAAOA,SAAP,EAAkB;AAChB;AACAA,IAAAA,SAAS,GAAG,KAAZ;AACAD,IAAAA,IAAI,GAAGD,KAAK,CAACC,IAAb;AACA;;;AAEA,SAAKE,CAAC,GAAG,CAAT,EAAYA,CAAC,GAAIF,IAAI,CAACL,MAAL,GAAc,CAA/B,EAAmCO,CAAC,EAApC,EAAwC;AACtC;AACAG,MAAAA,YAAY,GAAG,KAAf;AACA;;;AAEAF,MAAAA,CAAC,GAAGH,IAAI,CAACE,CAAD,CAAJ,CAAQT,oBAAR,CAA6B,IAA7B,EAAmC,CAAnC,CAAJ;AACAW,MAAAA,CAAC,GAAGJ,IAAI,CAACE,CAAC,GAAG,CAAL,CAAJ,CAAYT,oBAAZ,CAAiC,IAAjC,EAAuC,CAAvC,CAAJ,CANsC,CAOtC;;AACA,UAAIU,CAAC,CAACI,SAAF,CAAYC,WAAZ,KAA4BJ,CAAC,CAACG,SAAF,CAAYC,WAAZ,EAAhC,EAA2D;AACzD;AACAH,QAAAA,YAAY,GAAG,IAAf;AACA;AACD;AACF;;AACD,QAAIA,YAAJ,EAAkB;AAChB;;AAEAL,MAAAA,IAAI,CAACE,CAAD,CAAJ,CAAQO,UAAR,CAAmBC,YAAnB,CAAgCV,IAAI,CAACE,CAAC,GAAG,CAAL,CAApC,EAA6CF,IAAI,CAACE,CAAD,CAAjD;AACAD,MAAAA,SAAS,GAAG,IAAZ;AACD;AACF;AACF;;AAED,IAAMU,KAAK,GAAG,SAARA,KAAQ;AAAA,MAAEC,KAAF,QAAEA,KAAF;AAAA,SACZ;AAAO,IAAA,EAAE,EAAC,QAAV;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADF,EAEE;AAAI,IAAA,OAAO,EAAEd,SAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAFF,CADF,EAKE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACCc,KAAK,CAACC,GAAN,CAAU,UAACC,GAAD;AAAA,WACT;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE;AAAI,MAAA,KAAK,EAAEA,GAAG,CAACC,IAAJ,CAASC,OAAT,EAAX;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAgCF,GAAG,CAACC,IAAJ,CAASE,cAAT,CAAwB,OAAxB,CAAhC,CADF,EAEE;AAAI,MAAA,KAAK,EAAEH,GAAG,CAACI,IAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OAAsBJ,GAAG,CAACI,IAA1B,CAFF,CADS;AAAA,GAAV,CADD,CALF,CADY;AAAA,CAAd;;AAiBA,eAAeP,KAAf","sourcesContent":["import React from 'react'\r\n\r\nvar th = document.getElementsByTagName('th')\r\n\r\nfor(let c=0; c<th.length; c++){\r\n  th[c].addEventListener('click', item(c))\r\n}\r\n\r\nfunction sortTable() {\r\n  var table, rows, switching, i, x, y, shouldSwitch;\r\n  table = document.getElementById(\"tabela\");\r\n  switching = true;\r\n  /* Make a loop that will continue until\r\n  no switching has been done: */\r\n  while (switching) {\r\n    // Start by saying: no switching is done:\r\n    switching = false;\r\n    rows = table.rows;\r\n    /* Loop through all table rows (except the\r\n    first, which contains table headers): */\r\n    for (i = 1; i < (rows.length - 1); i++) {\r\n      // Start by saying there should be no switching:\r\n      shouldSwitch = false;\r\n      /* Get the two elements you want to compare,\r\n      one from current row and one from the next: */\r\n      x = rows[i].getElementsByTagName(\"TD\")[0];\r\n      y = rows[i + 1].getElementsByTagName(\"TD\")[0];\r\n      // Check if the two rows should switch place:\r\n      if (x.innerHTML.toLowerCase() > y.innerHTML.toLowerCase()) {\r\n        // If so, mark as a switch and break the loop:\r\n        shouldSwitch = true;\r\n        break;\r\n      }\r\n    }\r\n    if (shouldSwitch) {\r\n      /* If a switch has been marked, make the switch\r\n      and mark that a switch has been done: */\r\n      rows[i].parentNode.insertBefore(rows[i + 1], rows[i]);\r\n      switching = true;\r\n    }\r\n  }\r\n}\r\n\r\nconst Table = ({lista}) => (\r\n  <table id='tabela'>\r\n    <thead>\r\n      <th >Nome</th>\r\n      <th onClick={sortTable}>Ãšltimo acesso</th>\r\n    </thead>\r\n    <tbody>\r\n    {lista.map((row)=>(\r\n      <tr>\r\n        <td value={row.data.getTime()}>{row.data.toLocaleString(\"pt-BR\")}</td>\r\n        <td value={row.name}>{row.name}</td>\r\n      </tr>\r\n    ))}\r\n    </tbody>\r\n  </table>\r\n)\r\n\r\nexport default Table"]},"metadata":{},"sourceType":"module"}